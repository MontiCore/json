/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar represents a slight superset to the official JSON standard. 
 * It is intended for parsing JSON-compliant artifacts. Further well-formedness
 * checks are not included.
*/

grammar JSON extends de.monticore.literals.MCCommonLiterals {

  /** The starting nonterminal. */
  start JSONDocument;

  /** An ASTJSONValue represents an arbitrary property value. */
  interface JSONValue;

  /** An ASTJSONDocument represents an input file in JSON format.
    @attribute jSONValue The top level values contained in the JSON document.
  */
  JSONDocument = JSONValue;

  /** An ASTJSONObject is a JSONValue that may contain further properties.
    @attribute props The properties of the JSON document.
  */
  JSONObject implements JSONValue = "{" props:(JSONProperty || ",")* "}";

  /** An ASTJSONProperty represents elements in a key-value relationship.
    @attribute key The unique identifier of a property.
    @attribute name The forwarded key as name for symbol table access.
    @attribute jSONValue The property value associated with the identifier.
  */
  symbol scope JSONProperty = key:String ":" JSONValue;

  /** An ASTJSONBoolean represents a boolean property value.
    @attribute booleanLiteral The actual value.
  */
  JSONBoolean implements JSONValue = BooleanLiteral;

  /** An ASTJSONString represents a String property value.
    @attribute stringLiteral The actual value.
  */
  JSONString implements JSONValue = StringLiteral;

  /** An ASTJSONNumber represents a number property value.
    @attribute signedNumericLiteral The actual value (as integer or double).
  */
  JSONNumber implements JSONValue = SignedNumericLiteral;

  /** An ASTJSONArray represents an array of multiple property values.
    @attribute JSONValues The values in the array.
  */
  JSONArray implements JSONValue = "[" (JSONValue || ",")* "]";

  /** An ASTJSONNull represents an empty property value.
    @attribute nullLiteral The actual "null" value.
  */
  JSONNull implements JSONValue = NullLiteral;
  
  /** ASTSignedBasicDoubleLiteral represents a positive or negative double.
    Overrides the inherited production to include exponential representations.
    @attribute source String-representation (including '"').
  */
  SignedBasicDoubleLiteral implements SignedNumericLiteral<1> =
    negative:["-"]? DecimalDoublePointLiteral;


  /*========================================================================*/
  /*============================= LEXER RULES ==============================*/
  /*========================================================================*/

  token DecimalDoublePointLiteral = Digits '.' (Digits)? (ExponentPart)? |
                                    Digits ExponentPart;

  token ExponentPart = ExponentIndicator SignedInteger;

  fragment token ExponentIndicator = 'e' | 'E';
  
  fragment token SignedInteger = (Sign)? Digits;

  fragment token Sign = '+' | '-';
  
  
  /*========================================================================*/
  /*=========================== AST DEFINITIONS ============================*/
  /*========================================================================*/

  astrule JSONProperty =
    method public String getName()  {
      return getKey();
    }
  ;
  
  astrule SignedBasicDoubleLiteral =
    method public String getSource() {
      return (isNegative()?"-":"") + getDecimalDoublePointLiteral();
    }
    method public double getValue() {
      return de.monticore.MCLiteralsDecoder.decodeDouble(getSource());
    }
  ;
  
}
