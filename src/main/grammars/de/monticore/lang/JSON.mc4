/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

grammar JSON extends de.monticore.literals.MCCommonLiterals {

  /** The starting nonterminal. */
  start JSONDocument;

  /** An ASTJSONValue represents an arbitrary property value. */
  interface JSONValue;

  /** An ASTJSONDocument represents an input file in JSON format.
    @attribute objects The objects contained in the JSON document.
    @attribute values The top level values contained in the JSON document.
  */
  JSONDocument = value:JSONValue;

  /** An ASTJSONObject is a JSONValue that may contain further properties.
    @attribute props The properties of the JSON document.
  */
  JSONObject implements JSONValue = "{" prop:(JSONProperty || ",")* "}";

  /** An ASTJSONProperty represents elements in a key-value relationship.
    @attribute key The unique identifier of a property.
    @attribute value The property value associated with the identifier.
  */
  symbol scope JSONProperty = key:String ":" value:JSONValue;

  /** An ASTJSONBoolean represents a boolean property value.
    @attribute value The actual value.
  */
  JSONBoolean implements JSONValue = value:BooleanLiteral;

  /** An ASTJSONString represents a String property value.
    @attribute value The actual value.
  */
  JSONString implements JSONValue = value:String;

  /** An ASTJSONNumber represents a number property value.
    @attribute value The actual value (as signed integer or double).
  */
  JSONNumber implements JSONValue = value:SignedNumericLiteral;

  /** An ASTJSONArray represents an array of multiple property values.
    @attribute values The values in the array.
  */
  JSONArray implements JSONValue = "[" value:(JSONValue || ",")* "]";

  /** An ASTJSONNull represents an empty property value.
    @attribute value The actual "null" value.
  */
  JSONNull implements JSONValue = value:NullLiteral;
  
  /** ASTSignedBasicDoubleLiteral represents a positive or negative double.
    Overrides the inherited production to include exponential representations.
    @attribute source String-representation (including '"').
  */
  SignedBasicDoubleLiteral implements SignedNumericLiteral<1> =
    negative:["-"]? DecimalDoublePointLiteral;


  /*========================================================================*/
  /*============================ LEXER RULES ===============================*/
  /*========================================================================*/

  token DecimalDoublePointLiteral
     = Digits '.' (Digits)? (ExponentPart)?
       | Digits ExponentPart;

  token ExponentPart = ExponentIndicator SignedInteger;

  fragment token ExponentIndicator = 'e' | 'E';
  
  fragment token SignedInteger = (Sign)? Digits;

  fragment token Sign = '+' | '-';
  
  
  /*========================================================================*/
  /*======================= AST DEFINITIONS ================================*/
  /*========================================================================*/

  astrule JSONProperty =
    method public String getName()  {
      return getKey();
    }
  ;
  
  astrule SignedBasicDoubleLiteral =
    method public String getSource() {
      return (isNegative()?"-":"") + getDecimalDoublePointLiteral();
    }
    method public double getValue() {
      return de.monticore.MCLiteralsDecoder.decodeDouble(getSource());
    }
  ;
  
}
