// (c) https://github.com/MontiCore/monticore

/* ============================================================ */
/* ========================= Plugins ========================== */
/* ============================================================ */

plugins {
    id 'java'
    id "monticore" version "6.1.0"
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.adarshr.test-logger" version "2.0.0"
}

/* ============================================================ */
/* ========================= Project ========================== */
/* ============================================================ */

group = 'de.monticore.lang'
version = '1.0-SNAPSHOT'
description = 'json'
sourceCompatibility = '1.8'

/* ============================================================ */
/* ========================= Versions ========================= */
/* ============================================================ */

def monticore_version = "6.1.0"
def junit_version = "4.12"
def commons_cli_version = "1.4"
def grammar_classifier = "grammars"
def grammarDir = "src/main/grammars"

/* ============================================================ */
/* ======================= Configuration ====================== */
/* ============================================================ */

// configure non-standard source sets
sourceSets {
    main.java.srcDirs += [ "$projectDir/target/generated-sources/monticore/sourcecode"]

    test {
        java.srcDir "$projectDir/src/test/java"
        resources.srcDir "$projectDir/src/test/resources"
    }
}
buildDir = file("$projectDir/target")

configurations {grammar}

test {
    useJUnit()
}

/* ============================================================ */
/* ======================= Dependencies ======================= */
/* ============================================================ */

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url = 'https://nexus.se.rwth-aachen.de/content/groups/se/'
    }
}

dependencies {
    grammar "de.monticore:monticore-grammar:$monticore_version:$grammar_classifier"
    implementation "org.antlr:antlr4-runtime:4.7.1"
    implementation "de.monticore:monticore-generator:$monticore_version"
    implementation "de.monticore:monticore-runtime:$monticore_version"
    implementation "de.monticore:monticore-grammar:$monticore_version"
    implementation "org.assertj:assertj-core:3.7.0"
    implementation "commons-cli:commons-cli:$commons_cli_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "de.monticore:monticore-runtime:$monticore_version:tests"
    testImplementation "de.monticore:monticore-runtime:$monticore_version"
    compileOnly "de.monticore:monticore-grammar:$monticore_version"
}

/* ============================================================ */
/* ========================== Tasks =========================== */
/* ============================================================ */

task generateJSON(type: MCTask) {
    grammar = file "$projectDir/$grammarDir/de/monticore/lang/JSON.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath file("$projectDir/src/main/java")
    def uptoDate = incCheck(outputDir.toString() + "/de/monticore/lang/json/IncGenGradleCheck.txt")
    outputs.upToDateWhen { uptoDate }
}

compileJava.dependsOn(generateJSON)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// build sources jar in addition
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

// build javadoc jar in addition
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}

// generated java doc contains errors, disable for now
javadoc.failOnError(false)

// build grammar jar as well
task grammarJar(type: Jar) {
    from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
    archiveClassifier = "grammars"
}

// all in one cli-jar
shadowJar {
    manifest {
        attributes "Main-Class": "de.monticore.lang.json.JSONTool"
    }
    archiveClassifier = "cli"
    minimize()
}

/* ============================================================ */
/* ======================= Publishing ========================= */
/* ============================================================ */

publishing {
    // configure what artifacts to publish
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
  //          artifact shadowJar
            artifact grammarJar
        }
        cli(MavenPublication) {
            artifactId = "$project.name"
            artifact shadowJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password System.getenv("cibuild")
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}
